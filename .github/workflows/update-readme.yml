name: Update README

on:
  push:
    branches:
      - main

jobs:
  update-readme:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v2

      - name: Setup Node.js
        uses: actions/setup-node@v2
        with:
          node-version: '14.x'

      - name: Install dependencies
        run: npm install

      - name: Update README
        uses: actions/github-script@v4
        with:
          script: |
            const fs = require('fs');
            const path = require('path');

            // Read other MD file
            const otherMd = fs.readFileSync(path.join(process.cwd(), 'https://raw.githubusercontent.com/xx025/carrot/main/README.md'), 'utf8');

            // Remove content from first <a> tag
            const updatedMd = otherMd.replace(/<a[^>]*>(.*?)<\/a>/, '<a></a>');

            // Read README template
            let readme = fs.readFileSync(path.join(process.cwd(), 'README-template.md'), 'utf8');

            // Replace placeholder with updated MD content
            readme = readme.replace(/<!-- insert-other-md-here -->/g, updatedMd);

            // Write updated README file
            fs.writeFileSync(path.join(process.cwd(), 'README.md'), readme);

            // Commit and push changes
            await github.git.createCommit({
              owner: context.repo.owner,
              repo: context.repo.repo,
              message: 'Update README',
              tree: (await github.git.getTree({
                owner: context.repo.owner,
                repo: context.repo.repo,
                tree_sha: context.sha
              })).data.tree.map(file => {
                if (file.path === 'README.md') {
                  file.content = Buffer.from(readme).toString('base64');
                }
                return file;
              }),
              parents: [context.sha]
            });

            await github.git.updateRef({
              owner: context.repo.owner,
              repo: context.repo.repo,
              ref: `heads/${context.ref.split('/').pop()}`,
              sha: (await github.git.getRef({
                owner: context.repo.owner,
                repo: context.repo.repo,
                ref: `heads/${context.ref.split('/').pop()}`
              })).data.object.sha
            });
          secrets: |
            GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
